# coding: utf-8

"""
    Wavefront REST API

    <p>The Wavefront REST API enables you to interact with Wavefront servers using standard REST API tools. You can use the REST API to automate commonly executed operations such as automatically tagging sources.</p><p>When you make REST API calls outside the Wavefront REST API documentation you must add the header \"Authorization: Bearer &lt;&lt;API-TOKEN&gt;&gt;\" to your HTTP requests.</p>  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from wavefront_api_client.models.alert import Alert  # noqa: F401,E501


class IntegrationAlert(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'name': 'str',
        'url': 'str',
        'alert_obj': 'Alert'
    }

    attribute_map = {
        'description': 'description',
        'name': 'name',
        'url': 'url',
        'alert_obj': 'alertObj'
    }

    def __init__(self, description=None, name=None, url=None, alert_obj=None):  # noqa: E501
        """IntegrationAlert - a model defined in Swagger"""  # noqa: E501

        self._description = None
        self._name = None
        self._url = None
        self._alert_obj = None
        self.discriminator = None

        self.description = description
        self.name = name
        self.url = url
        if alert_obj is not None:
            self.alert_obj = alert_obj

    @property
    def description(self):
        """Gets the description of this IntegrationAlert.  # noqa: E501

        Alert description  # noqa: E501

        :return: The description of this IntegrationAlert.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this IntegrationAlert.

        Alert description  # noqa: E501

        :param description: The description of this IntegrationAlert.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def name(self):
        """Gets the name of this IntegrationAlert.  # noqa: E501

        Alert name  # noqa: E501

        :return: The name of this IntegrationAlert.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IntegrationAlert.

        Alert name  # noqa: E501

        :param name: The name of this IntegrationAlert.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def url(self):
        """Gets the url of this IntegrationAlert.  # noqa: E501

        URL path to the JSON definition of this alert  # noqa: E501

        :return: The url of this IntegrationAlert.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this IntegrationAlert.

        URL path to the JSON definition of this alert  # noqa: E501

        :param url: The url of this IntegrationAlert.  # noqa: E501
        :type: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def alert_obj(self):
        """Gets the alert_obj of this IntegrationAlert.  # noqa: E501


        :return: The alert_obj of this IntegrationAlert.  # noqa: E501
        :rtype: Alert
        """
        return self._alert_obj

    @alert_obj.setter
    def alert_obj(self, alert_obj):
        """Sets the alert_obj of this IntegrationAlert.


        :param alert_obj: The alert_obj of this IntegrationAlert.  # noqa: E501
        :type: Alert
        """

        self._alert_obj = alert_obj

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IntegrationAlert, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IntegrationAlert):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
