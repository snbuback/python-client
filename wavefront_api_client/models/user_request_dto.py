# coding: utf-8

"""
    Wavefront REST API

    <p>The Wavefront REST API enables you to interact with Wavefront servers using standard REST API tools. You can use the REST API to automate commonly executed operations such as automatically tagging sources.</p><p>When you make REST API calls outside the Wavefront REST API documentation you must add the header \"Authorization: Bearer &lt;&lt;API-TOKEN&gt;&gt;\" to your HTTP requests.</p>  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class UserRequestDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'identifier': 'str',
        'sso_id': 'str',
        'customer': 'str',
        'groups': 'list[str]',
        'user_groups': 'list[str]'
    }

    attribute_map = {
        'identifier': 'identifier',
        'sso_id': 'ssoId',
        'customer': 'customer',
        'groups': 'groups',
        'user_groups': 'userGroups'
    }

    def __init__(self, identifier=None, sso_id=None, customer=None, groups=None, user_groups=None):  # noqa: E501
        """UserRequestDTO - a model defined in Swagger"""  # noqa: E501

        self._identifier = None
        self._sso_id = None
        self._customer = None
        self._groups = None
        self._user_groups = None
        self.discriminator = None

        if identifier is not None:
            self.identifier = identifier
        if sso_id is not None:
            self.sso_id = sso_id
        if customer is not None:
            self.customer = customer
        if groups is not None:
            self.groups = groups
        if user_groups is not None:
            self.user_groups = user_groups

    @property
    def identifier(self):
        """Gets the identifier of this UserRequestDTO.  # noqa: E501


        :return: The identifier of this UserRequestDTO.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this UserRequestDTO.


        :param identifier: The identifier of this UserRequestDTO.  # noqa: E501
        :type: str
        """

        self._identifier = identifier

    @property
    def sso_id(self):
        """Gets the sso_id of this UserRequestDTO.  # noqa: E501


        :return: The sso_id of this UserRequestDTO.  # noqa: E501
        :rtype: str
        """
        return self._sso_id

    @sso_id.setter
    def sso_id(self, sso_id):
        """Sets the sso_id of this UserRequestDTO.


        :param sso_id: The sso_id of this UserRequestDTO.  # noqa: E501
        :type: str
        """

        self._sso_id = sso_id

    @property
    def customer(self):
        """Gets the customer of this UserRequestDTO.  # noqa: E501


        :return: The customer of this UserRequestDTO.  # noqa: E501
        :rtype: str
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """Sets the customer of this UserRequestDTO.


        :param customer: The customer of this UserRequestDTO.  # noqa: E501
        :type: str
        """

        self._customer = customer

    @property
    def groups(self):
        """Gets the groups of this UserRequestDTO.  # noqa: E501


        :return: The groups of this UserRequestDTO.  # noqa: E501
        :rtype: list[str]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this UserRequestDTO.


        :param groups: The groups of this UserRequestDTO.  # noqa: E501
        :type: list[str]
        """

        self._groups = groups

    @property
    def user_groups(self):
        """Gets the user_groups of this UserRequestDTO.  # noqa: E501


        :return: The user_groups of this UserRequestDTO.  # noqa: E501
        :rtype: list[str]
        """
        return self._user_groups

    @user_groups.setter
    def user_groups(self, user_groups):
        """Sets the user_groups of this UserRequestDTO.


        :param user_groups: The user_groups of this UserRequestDTO.  # noqa: E501
        :type: list[str]
        """

        self._user_groups = user_groups

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserRequestDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserRequestDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
