# coding: utf-8

"""
    Wavefront REST API

    <p>The Wavefront REST API enables you to interact with Wavefront servers using standard REST API tools. You can use the REST API to automate commonly executed operations such as automatically tagging sources.</p><p>When you make REST API calls outside the Wavefront REST API documentation you must add the header \"Authorization: Bearer &lt;&lt;API-TOKEN&gt;&gt;\" to your HTTP requests.</p>  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from wavefront_api_client.models.azure_base_credentials import AzureBaseCredentials  # noqa: F401,E501


class AzureActivityLogConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'category_filter': 'list[str]',
        'base_credentials': 'AzureBaseCredentials'
    }

    attribute_map = {
        'category_filter': 'categoryFilter',
        'base_credentials': 'baseCredentials'
    }

    def __init__(self, category_filter=None, base_credentials=None):  # noqa: E501
        """AzureActivityLogConfiguration - a model defined in Swagger"""  # noqa: E501

        self._category_filter = None
        self._base_credentials = None
        self.discriminator = None

        if category_filter is not None:
            self.category_filter = category_filter
        if base_credentials is not None:
            self.base_credentials = base_credentials

    @property
    def category_filter(self):
        """Gets the category_filter of this AzureActivityLogConfiguration.  # noqa: E501

        A list of Azure ActivityLog categories to pull events for.Allowable values are ADMINISTRATIVE, SERVICEHEALTH, ALERT, AUTOSCALE, SECURITY  # noqa: E501

        :return: The category_filter of this AzureActivityLogConfiguration.  # noqa: E501
        :rtype: list[str]
        """
        return self._category_filter

    @category_filter.setter
    def category_filter(self, category_filter):
        """Sets the category_filter of this AzureActivityLogConfiguration.

        A list of Azure ActivityLog categories to pull events for.Allowable values are ADMINISTRATIVE, SERVICEHEALTH, ALERT, AUTOSCALE, SECURITY  # noqa: E501

        :param category_filter: The category_filter of this AzureActivityLogConfiguration.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["ADMINISTRATIVE", "SERVICEHEALTH", "ALERT", "AUTOSCALE", "SECURITY"]  # noqa: E501
        if not set(category_filter).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `category_filter` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(category_filter) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._category_filter = category_filter

    @property
    def base_credentials(self):
        """Gets the base_credentials of this AzureActivityLogConfiguration.  # noqa: E501


        :return: The base_credentials of this AzureActivityLogConfiguration.  # noqa: E501
        :rtype: AzureBaseCredentials
        """
        return self._base_credentials

    @base_credentials.setter
    def base_credentials(self, base_credentials):
        """Sets the base_credentials of this AzureActivityLogConfiguration.


        :param base_credentials: The base_credentials of this AzureActivityLogConfiguration.  # noqa: E501
        :type: AzureBaseCredentials
        """

        self._base_credentials = base_credentials

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AzureActivityLogConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AzureActivityLogConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
